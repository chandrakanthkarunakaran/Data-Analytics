{
	"jobConfig": {
		"name": "example",
		"description": "",
		"role": "arn:aws:iam::073914561898:role/service-role/AWSGlueServiceRole-GlueDemo",
		"command": "glueetl",
		"version": "3.0",
		"workerType": "G.1X",
		"numberOfWorkers": "5",
		"maxCapacity": 2,
		"maxRetries": 0,
		"timeout": 2880,
		"maxConcurrentRuns": 1,
		"security": "none",
		"scriptName": "example.py",
		"scriptLocation": "s3://aws-glue-assets-073914561898-us-east-2/scripts/",
		"language": "python-3",
		"jobParameters": [],
		"tags": [],
		"jobMode": "NOTEBOOK_MODE",
		"createdOn": "2023-04-15T05:08:19.245Z",
		"developerMode": false,
		"connectionsList": [],
		"temporaryDirectory": "s3://aws-glue-assets-073914561898-us-east-2/temporary/",
		"etlAutoScaling": "false",
		"glueHiveMetastore": "true",
		"etlAutoTuning": "false",
		"serverEncryption": "false",
		"pythonShellPrebuiltLibraryOption": "analytics",
		"flexExecution": false,
		"minFlexWorkers": null,
		"bookmark": "",
		"metrics": "",
		"logging": "",
		"spark": "",
		"sparkPath": "",
		"pythonPath": "",
		"dependentPath": "",
		"referencedPath": "",
		"etlAutoTuningJobRules": "",
		"pythonVersion": ""
	},
	"hasBeenSaved": false,
	"script": "\nimport sys\nfrom awsglue.transforms import *\nfrom awsglue.utils import getResolvedOptions\nfrom pyspark.context import SparkContext\nfrom awsglue.context import GlueContext\nfrom awsglue.job import Job\n  \nsc = SparkContext.getOrCreate()\nglueContext = GlueContext(sc)\nspark = glueContext.spark_session\njob = Job(glueContext)\ndyf = glueContext.create_dynamic_frame.from_catalog(database='database_name', table_name='table_name')\ndyf.printSchema()\ndf = dyf.toDF()\ndf.show()\ns3output = glueContext.getSink(\n  path=\"s3://bucket_name/folder_name\",\n  connection_type=\"s3\",\n  updateBehavior=\"UPDATE_IN_DATABASE\",\n  partitionKeys=[],\n  compression=\"snappy\",\n  enableUpdateCatalog=True,\n  transformation_ctx=\"s3output\",\n)\ns3output.setCatalogInfo(\n  catalogDatabase=\"demo\", catalogTableName=\"populations\"\n)\ns3output.setFormat(\"glueparquet\")\ns3output.writeFrame(DyF)\njob.commit()",
	"notebook": {
		"cells": [
			{
				"cell_type": "markdown",
				"execution_count": null,
				"metadata": {
					"trusted": true,
					"editable": true
				},
				"outputs": [],
				"source": [
					"# AWS Glue Studio Notebook\n",
					"##### You are now running a AWS Glue Studio notebook; To start using your notebook you need to start an AWS Glue Interactive Session.\n"
				]
			},
			{
				"cell_type": "markdown",
				"execution_count": null,
				"metadata": {
					"trusted": true,
					"editable": true
				},
				"outputs": [],
				"source": [
					"#### Optional: Run this cell to see available notebook commands (\"magics\").\n"
				]
			},
			{
				"cell_type": "code",
				"execution_count": null,
				"metadata": {
					"trusted": true,
					"editable": true
				},
				"outputs": [],
				"source": [
					"%help"
				]
			},
			{
				"cell_type": "markdown",
				"execution_count": null,
				"metadata": {
					"trusted": true,
					"editable": true
				},
				"outputs": [],
				"source": [
					"####  Run this cell to set up and start your interactive session.\n"
				]
			},
			{
				"cell_type": "code",
				"execution_count": null,
				"metadata": {
					"trusted": true,
					"editable": true
				},
				"outputs": [],
				"source": [
					"%idle_timeout 2880\n%glue_version 3.0\n%worker_type G.1X\n%number_of_workers 5\n\nimport sys\nfrom awsglue.transforms import *\nfrom awsglue.utils import getResolvedOptions\nfrom pyspark.context import SparkContext\nfrom awsglue.context import GlueContext\nfrom awsglue.job import Job\n  \nsc = SparkContext.getOrCreate()\nglueContext = GlueContext(sc)\nspark = glueContext.spark_session\njob = Job(glueContext)"
				]
			},
			{
				"cell_type": "markdown",
				"execution_count": null,
				"metadata": {
					"trusted": true,
					"editable": true
				},
				"outputs": [],
				"source": [
					"#### Example: Create a DynamicFrame from a table in the AWS Glue Data Catalog and display its schema\n"
				]
			},
			{
				"cell_type": "code",
				"execution_count": null,
				"metadata": {
					"trusted": true,
					"editable": true
				},
				"outputs": [],
				"source": [
					"dyf = glueContext.create_dynamic_frame.from_catalog(database='database_name', table_name='table_name')\ndyf.printSchema()"
				]
			},
			{
				"cell_type": "markdown",
				"execution_count": null,
				"metadata": {
					"trusted": true,
					"editable": true
				},
				"outputs": [],
				"source": [
					"#### Example: Convert the DynamicFrame to a Spark DataFrame and display a sample of the data\n"
				]
			},
			{
				"cell_type": "code",
				"execution_count": null,
				"metadata": {
					"trusted": true,
					"editable": true
				},
				"outputs": [],
				"source": [
					"df = dyf.toDF()\ndf.show()"
				]
			},
			{
				"cell_type": "markdown",
				"execution_count": null,
				"metadata": {
					"trusted": true,
					"editable": true
				},
				"outputs": [],
				"source": [
					"#### Example: Write the data in the DynamicFrame to a location in Amazon S3 and a table for it in the AWS Glue Data Catalog\n"
				]
			},
			{
				"cell_type": "code",
				"execution_count": null,
				"metadata": {
					"trusted": true,
					"editable": true
				},
				"outputs": [],
				"source": [
					"s3output = glueContext.getSink(\n  path=\"s3://bucket_name/folder_name\",\n  connection_type=\"s3\",\n  updateBehavior=\"UPDATE_IN_DATABASE\",\n  partitionKeys=[],\n  compression=\"snappy\",\n  enableUpdateCatalog=True,\n  transformation_ctx=\"s3output\",\n)\ns3output.setCatalogInfo(\n  catalogDatabase=\"demo\", catalogTableName=\"populations\"\n)\ns3output.setFormat(\"glueparquet\")\ns3output.writeFrame(DyF)"
				]
			}
		],
		"metadata": {
			"kernelspec": {
				"display_name": "Glue Interactive Sessions",
				"language": "python"
			},
			"language_info": {
				"codemirror_mode": {
					"name": "python",
					"version": 3
				},
				"file_extension": ".py",
				"mimetype": "text/x-python",
				"name": "glue_pyspark"
			},
			"orig_nbformat": 4
		},
		"nbformat": 4,
		"nbformat_minor": 4
	}
}